import os
import time
import json
import requests
from datetime import datetime
from github import Github, GithubException
from dotenv import load_dotenv

# ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
CONFIG_PATH = os.path.join(BASE_DIR, 'config', 'secrets.env')
DATA_PATH = os.path.join(BASE_DIR, 'data', 'processed', 'combined.json')
SYMBOLS = [
  "BTCUSDT",
  "SOLUSDT"
]
COIN_IDS = [
  "bitcoin",
  "solana"
]
INTERVAL = 60  # seconds
GITHUB_REPO = "Alfabit7/datatest"  # –ó–∞–º–µ–Ω–∏—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

# ========== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ==========
load_dotenv(dotenv_path=CONFIG_PATH)
os.makedirs(os.path.dirname(DATA_PATH), exist_ok=True)

class DataCollector:
    @staticmethod
    def safe_request(url, params=None, headers=None, timeout=10): """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            response = requests.get(url, params=params, headers=headers, timeout=timeout)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"[API Error] {str(e)}")
            return None

    def get_binance_data(self, symbol):
        data = self.safe_request(
            f"https://fapi.binance.com/fapi/v1/ticker/24hr",
            params={
  "symbol": symbol
}
        )
        if data:
            return {
  "price": float(data[
    "lastPrice"
  ]),
  "volume": float(data[
    "volume"
  ]),
  "funding_rate": float(data.get("lastFundingRate",
  0))
}
        return None

    def get_bybit_data(self, symbol):
        data = self.safe_request(
            "https://api.bybit.com/v5/market/tickers",
            params={
  "category": "linear",
  "symbol": symbol
}
        )
        if data and data.get("retCode") == 0:
            item = data[
  "result"
][
  "list"
][
  0
]
            return {
  "price": float(item[
    "lastPrice"
  ]),
  "volume": float(item[
    "volume24h"
  ]),
  "funding_rate": float(item[
    "fundingRate"
  ])
}
        return None

    def get_coingecko_data(self, coin_id):
        headers = {
  "x-cg-demo-api-key": os.getenv("COINGECKO_API_KEY")
} if os.getenv("COINGECKO_API_KEY") else {}
        data = self.safe_request(
            f"https://api.coingecko.com/api/v3/coins/{coin_id}",
            headers=headers,
            timeout=15
        )
        if data:
            return {
  "price": data[
    "market_data"
  ][
    "current_price"
  ][
    "usd"
  ],
  "market_cap": data[
    "market_data"
  ][
    "market_cap"
  ][
    "usd"
  ]
}
        return None

    def collect(self):
        result = {
  "timestamp": datetime.utcnow().isoformat(),
  "binance": {},
  "bybit": {},
  "coingecko": {}
}
        
        for symbol in SYMBOLS:
            if data := self.get_binance_data(symbol):
                result[
  "binance"
][symbol
] = data
            
            if data := self.get_bybit_data(symbol):
                result[
  "bybit"
][symbol
] = data
            
            time.sleep(1)
        
        for coin_id in COIN_IDS:
            if data := self.get_coingecko_data(coin_id):
                result[
  "coingecko"
][coin_id
] = data
            time.sleep(2)
        
        return result

class DataManager:
    @staticmethod
    def save_to_file(data):
        try:
            existing = []
            if os.path.exists(DATA_PATH):
                with open(DATA_PATH, 'r', encoding='utf-8') as f:
                    existing = json.load(f)
            
            existing.append(data)
            
            with open(DATA_PATH, 'w', encoding='utf-8') as f:
                json.dump(existing, f, indent=2, ensure_ascii=False)
            
            return True
        except Exception as e:
            print(f"[DataManager] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
            return False

    @staticmethod
    def upload_to_github():
        try:
            g = Github(os.getenv("GITHUB_TOKEN"))
            repo = g.get_repo(GITHUB_REPO)
            
            with open(DATA_PATH, 'r', encoding='utf-8') as f:
                content = f.read()

            try:
                contents = repo.get_contents("combined.json")
                repo.update_file(
                    path=contents.path,
                    message=f"Autoupdate {datetime.now().strftime('%Y-%m-%d %H:%M')}",
                    content=content,
                    sha=contents.sha
                )
            except GithubException as e:
                if e.status == 404:
                    repo.create_file(
                        path="combined.json",
                        message="Initial data commit",
                        content=content
                    )
                else:
                    raise
            
            return True
        except Exception as e:
            print(f"‚ùå GitHub –æ—à–∏–±–∫–∞: {str(e)}")
            return False

def check_config():
    if not os.getenv("GITHUB_TOKEN"):
        print("‚ùå GitHub —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ secrets.env")
        return False
    
    try:
        Github(os.getenv("GITHUB_TOKEN")).get_repo(GITHUB_REPO)
        return True
    except GithubException as e:
        print(f"‚ùå GitHub –æ—à–∏–±–∫–∞: {str(e)}")
        return False

if __name__ == "__main__":
    print("=== –ö—Ä–∏–ø—Ç–æ-—Å–±–æ—Ä—â–∏–∫ –¥–∞–Ω–Ω—ã—Ö ===")
    print(f"–†–µ–∂–∏–º: {'DEMO' if os.getenv('COINGECKO_API_KEY') else 'PUBLIC API'}")
    print(f"–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {GITHUB_REPO}")
    
    if not check_config():
        exit(1)

    collector = DataCollector()
    manager = DataManager()

    try:
        while True:
            print(f"\n{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö...")
            
            data = collector.collect()
            
            if manager.save_to_file(data):
                print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ")
                if manager.upload_to_github():
                    print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ GitHub")
                else:
                    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ GitHub (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏)")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            
            time.sleep(INTERVAL)
    except KeyboardInterrupt:
        print("\nüõë –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")